from copy import copy
from collections import deque
from queue import Queue
import sys

n = int(input())
grid = []
boolgrid = []
for i in range(n):
    grid.append(input())


char = []
wontchange = []



for i in range(10):
    char.append(1)    
order = [0,0]
for i in range(2):
    first = ord(grid[i-1][i-1])
    if first >= ord("a"):
        order[0] = first - ord("a")
        order[1] = 1
    else: order[0] = first - ord("A"); order[1] = 2
    char[order[0]] = order[1]           #setting chars for current letter of current position in the grid
    wontchange.append(order[0])

if wontchange[0] == wontchange[1]:
    if ord(grid[0][0]) != ord(grid[n-1][n-1]):
        print(-1)
        sys.exit()



def BFS():
    global q
    global grid
    global way
    global n

    boolgrid = []
    depth = 1
    case = [0,0]
    
    for i in range(n): 
        boolgrid.append([])   
        for j in range(n):
            boolgrid[i].append(0)
    boolgrid[0][0] = 1

    while(True):



        if q.qsize() < 1: return 0

        pos = q.get()
        depth = pos[2]

        if pos[0] == pos[1] and pos[1] == n-1:
            if depth <= way or way == -1:
                way = depth
                return 0                    #checking if is on the last square or if the sum is bigger than the record
            return 0
        
        if depth > way and way != -1: return 0

        case = [0,0]

        if pos[1] != n-1 and boolgrid[pos[0]][pos[1]+1] == 0: #right

            newcase = ord(grid[pos[0]][pos[1]+1])
            if newcase >= ord("a"):
                case[0] = newcase - ord("a")
                case[1] = 1
            else: case[0] = newcase - ord("A"); case[1] = 2

            if char[case[0]] == case[1]:
                boolgrid[pos[0]][pos[1]+1] = 1
                q.put([pos[0], pos[1]+1, depth+1])

        if pos[0] != n-1 and boolgrid[pos[0]+1][pos[1]] == 0: #down

            newcase = ord(grid[pos[0]+1][pos[1]])           
            if newcase >= ord("a"):
                case[0] = newcase - ord("a")
                case[1] = 1
            else: case[0] = newcase - ord("A"); case[1] = 2

            if char[case[0]] == case[1]:
                boolgrid[pos[0]+1][pos[1]] = 1
                q.put([pos[0]+1, pos[1], depth+1])

        if pos[1] != 0 and boolgrid[pos[0]][pos[1]-1] == 0: #left

            newcase = ord(grid[pos[0]][pos[1]-1])
            if newcase >= ord("a"):
                case[0] = newcase - ord("a")
                case[1] = 1
            else: case[0] = newcase - ord("A"); case[1] = 2

            if char[case[0]] == case[1]:
                boolgrid[pos[0]][pos[1]-1] = 1
                q.put([pos[0], pos[1]-1, depth+1])

        if pos[0] != 0 and boolgrid[pos[0]-1][pos[1]] == 0: #up

            newcase = ord(grid[pos[0]-1][pos[1]])
            if newcase >= ord("a"):
                case[0] = newcase - ord("a")
                case[1] = 1
            else: case[0] = newcase - ord("A"); case[1] = 2

            if char[case[0]] == case[1]:
                boolgrid[pos[0]-1][pos[1]] = 1
                q.put([pos[0]-1, pos[1], depth+1])




way = -1
k = 0

def function(n, number):        #make 2^10 possibilities
    global k
    global q
    global wontchange

    if k-number < 0: 
        q = Queue(maxsize = 0)
        q.put([0,0,1])
        # print("HEY")
        # for i in range(10):
            # if char[i] != 2: break
            # if i == 9: sys.exit()
        BFS()
        return 0
        
    for i in range(10-n):
        if k - number + i + n >= 10:        #linha essencial!!!!
            # print("penis")
            return 0
        if i + n == wontchange[0] or i + n == wontchange[1]: 
            function(n+1+i, number)        #não precisa alterar a letra do início e do fim
            return 0
        char[n+i] = 2
        # print(char)
        function(n+1+i, number+1)
        char[n+i] = 1
	
	 

for i in range (10):
    k = i
    q = Queue(maxsize = 0)
    q.put([0,0,1])
    BFS()
    function(0,0)	



print(way)